---
layout: post
title:      "Sinatra Portfolio Project - Jobservation"
date:       2020-03-29 02:25:50 +0000
permalink:  sinatra_portfolio_project_-_jobservation
---

During the last three weeks, I've worked on my sinatra project, one that was a bit harder to plan unlike my CLI gem project. For my project idea, I had to approach my view of making  my idea be structured differently and be planned in a different way than that of my CLI gem project. Throughout my process of planning, coding, and testing, I've started to grow more comfortable using databases in my program all the while jumping a few hurdles that headed my way while making it.

For starters, one of the first hurdles I've hit when making my project was the first idea of it which was going to determine how I was going to build it. At the begining I wanted to make a simple tracker that kept track of keeping information for a user's applications and interviews, such as the date of interviews or date of application, what position a user applied for, and even the company they applied with. At first, I was stuck on thinking should I link the applications table together to the interviews table, make the two have a join, or seperated with no linked data? To get through my idea to make it have the most sense, I've used a database planner, [dbdiagram.io](https://dbdiagram.io/home), to help me plan out how I should create my database. Ultimately, I've decided to keep my interviews and applications data seperate from each other, as it made more sense in the context of the data I've wanted to store in the interviews table. After getting through this tough planning stage of how debating how my data should be made, I was then able to begin my project and get it started.
# Creating the Project and Primary Features
For creating the project I began exactly the way I have when I created my CLI gem project, I set up my gem file, made the necessary directories I needed, except this time the directories were made to follow a MVC file structure. Once the files were set up, I began to create my models, starting views, and a first controller for my application to begin. The first controller I made was my application controller which held all my routes for the home page, sign up, login and routing to the user home page. Along with the controller, models were set up so that users can have many interviews and applications, and that interviews and applications belonged to users, and users can have a secure password setup.

After creating the necessary files and following the MVC structure I began to create my necessary views and add in forms to make it possible for a user to sign up, and login. After just making a user login and sign up, I've worked on making it possible for a user to view their homepage, create and view interviews and applications on their homepage and then add in buttons that would lead to the editing or deleting of a application or interview. During this stage of the project, applications and interviews had similar data at the time for the sake of keeping things small and making it easy to test and view the way the code work. Once applications and interviews could be created, viewed, edited, and deleted, the priamry features of the app were completed. However, I was still not done at this time, as my program at this time could not validate the uniqueness of a email when signing up, and the extra data I wanted to add in to the interviews database was not placed in yet.

# Adding More Features and New Data
When the primary features were in place, I removed anything that was unneccasry as I added in more features and data in to the program. One of the things I edited the most during this point was the interviews database and the pages asscoiated with it that displayed or used its data. As previously said, the data I had in the databse was the same as the applications database, with the difference being one column, to differentiate these two databases more, I added in more columns in to the interviews database. 

When adding in more columns to the interviews databse, I added in more data which was letting the database store street addresses and notes for a user to enter. With this new data a user can now keep track of the company, position, date, time, and location for sure on the tracker, while the notes section of a stored interview is optional.  On the user homepage, I removed the old edit/remove link which brought the user to a new page full of edit links and delete buttons listed next to their interviews to let a user remove or edit an interview, with the new data, I made a full view page that had these links and form button added in alongside letting the user view the data they entered for a interview. However, on the homepage, the basic data for a interview, such as the company, position, date, and time of a interview would still be listed to be viewed, while the view button shows the other data associated with the interview.

While everything with the applications stayed the same, a user's data on the database has been updated at this point in a way that only affects a new user when they sign up, and that is the validation of the user's email. Originally, signing up had allowed a user to enter a repeated email address with a new name and password, and that would count as a new account. After adding a uniqueness validator to the user model for emails, the program will now validate a email before a user signs up making sure a new email that isn't registered in to the database can be added. If emails that are registerd that are trying to make a new account will fail and redirect the user to the sign up page with a message saying the email has been taken.
# The Last Hurdle and After Thoughts
At this point the project was done, it has all the features it needs to run, and it allows a user to login, see only their content and edit, view, and delete their own content that is added to their homepage. However, there was one last hurdle I wanted to overcome, which was adding at least adding some css to style some of the html pages I created. Instead of adding in normal css, I used a stylesheet langauge called sass to create the styling for my pages, the main reason I did this was so I can store the primary colors of my project for the style I wanted to a variable and call that color from the variable to get it out easier instead of pulling it from a copied hexadecimal value. With the variable for the project's colors in sass, I was able to make the stylesheets for my html pages a little faster than I could with regular css.

With my project completed, and I move on to rails, the experince I got from making a database with ActiveRecord and making routes using Sinatra will definitely carry over, along with the lessons I've learned while making this project. With moving on, one thing I do want to look back on to carry over in to rails is how to utilize the sysrandom gem to make the session secret more secure, as my session secret is not too secure as is, within my project. Alongside this, another thing I'd want to look in to is how to use environment variables to make my code and sessions more secure when heading in to rails. With learning these two things when jumping in to rails, my code will be more secure and my learning process when going through rails will be more interesting to learn from.
 




